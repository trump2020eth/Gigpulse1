import React, { useEffect, useState } from 'react';
import { View, StyleSheet, Alert } from 'react-native';
import { Button, Card, Text } from 'react-native-paper';
import * as Location from 'expo-location';
import * as TaskManager from 'expo-task-manager';
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { fmt, haversine } from '../lib/utils';
const LOCATION_TASK='GIGPULSE_LOCATION_TASK';
TaskManager.defineTask(LOCATION_TASK, async ({data,error})=>{ if(error) return; const {locations}=(data||{}); try{ const active=await AsyncStorage.getItem('activeSession'); if(!active) return; const s=JSON.parse(active); const lastRaw=await AsyncStorage.getItem('lastPoint'); const last=lastRaw?JSON.parse(lastRaw):null; for(const loc of (locations||[])){ const p={latitude:loc.coords.latitude,longitude:loc.coords.longitude,timestamp:loc.timestamp}; if(last) s.distance=(s.distance||0)+haversine(last,p); await AsyncStorage.setItem('lastPoint',JSON.stringify(p)); } await AsyncStorage.setItem('activeSession',JSON.stringify(s)); }catch{} });
export default function DriveScreen(){ const [tracking,setTracking]=useState(false),[miles,setMiles]=useState(0); useEffect(()=>{(async()=>{ const fg=await Location.requestForegroundPermissionsAsync(); if(fg.status!=='granted'){Alert.alert('Permission required','Allow location to track mileage.'); return;} const bg=await Location.requestBackgroundPermissionsAsync(); if(bg.status!=='granted'){Alert.alert('Background location','Enable background location for accurate mileage.');} const active=await AsyncStorage.getItem('activeSession'); if(active){ const s=JSON.parse(active); setTracking(true); setMiles((s.distance||0)/1609.34);} })();},[]); useEffect(()=>{ const t=setInterval(async()=>{ const active=await AsyncStorage.getItem('activeSession'); if(active){ const s=JSON.parse(active); setMiles((s.distance||0)/1609.34);} },4000); return ()=>clearInterval(t);},[]);
  async function start(){ const s={id:Date.now().toString(),startTime:Date.now(),endTime:null,distance:0}; await AsyncStorage.setItem('activeSession',JSON.stringify(s)); await AsyncStorage.removeItem('lastPoint'); setTracking(true); const started=await Location.hasStartedLocationUpdatesAsync(LOCATION_TASK); if(!started) await Location.startLocationUpdatesAsync(LOCATION_TASK,{accuracy:Location.Accuracy.Balanced,distanceInterval:50,deferredUpdatesInterval:60000,showsBackgroundLocationIndicator:true,foregroundService:{notificationTitle:'GigPulse tracking',notificationBody:'Recording mileageâ€¦'}}); await Notifications.scheduleNotificationAsync({content:{title:'Drive tracking started',body:'Logging miles in background.'},trigger:null}); }
  async function stop(){ const activeRaw=await AsyncStorage.getItem('activeSession'); const sessionsRaw=await AsyncStorage.getItem('sessions'); const sessions=sessionsRaw?JSON.parse(sessionsRaw):[]; if(activeRaw){ const s=JSON.parse(activeRaw); s.endTime=Date.now(); sessions.unshift(s); await AsyncStorage.setItem('sessions',JSON.stringify(sessions)); } await AsyncStorage.removeItem('activeSession'); await AsyncStorage.removeItem('lastPoint'); const started=await Location.hasStartedLocationUpdatesAsync(LOCATION_TASK); if(started) await Location.stopLocationUpdatesAsync(LOCATION_TASK); setTracking(false); setMiles(0); }
  return (<View style={styles.wrap}><Text variant="headlineSmall" style={styles.title}>Drive</Text><Card style={styles.card}><Card.Content><Text variant="displaySmall" style={{color:'#2ECC71',fontWeight:'900'}}>{fmt(miles,' mi')}</Text><Text style={{color:'#9aa'}}>Current session distance</Text><View style={{flexDirection:'row',gap:10,marginTop:16}}>{!tracking?<Button mode="contained" onPress={start} style={{flex:1}}>Start</Button>:<Button mode="contained" onPress={stop} style={{flex:1}} buttonColor="#c22">Stop</Button>}</View></Card.Content></Card></View>); }
const styles=StyleSheet.create({ wrap:{flex:1,backgroundColor:'#0b0b0b',padding:14,paddingTop:20}, title:{color:'#fff',marginBottom:10}, card:{backgroundColor:'#141414'} });
